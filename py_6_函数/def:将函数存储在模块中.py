# ===========================================================
print('\n将函数存储在模块中')
# 函数的优点之一是，使用它们可将代码块与主程序分离。
# 通过给函数指定描述性名称，可让主程序容易理解得多。
# 你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。
# import语句允许在当前运行的程序文件中使用模块中的代码。

# 通过将函数存储在独立的文件中，可隐藏程序代码的细节，将重点放在程序的高层逻辑上。
# 这还能让你在众多不同的程序中重用函数。
# 将函数存储在独立文件中后，可与其他程序员共享这些文件而不是整个程序。
# 知道如何导入函数还能让你使用其他程序员编写的函数库。

# Python读取这个文件时，代码行import common让Python打开文件common.py，并将其中的所有函数都复制到这个程序中。
# 你看不到复制的代码，因为这个程序运行时，Python在幕后复制这些代码。
# 你只需知道，在common.py中，可以使用common.py中定义的所有函数

print('\n导入整个模块')
# 导入整个模块,使用他的方法是为 模块名.方法名()
import common1   

common1.fun1()
common1.fun2()
common1.fun3()


print('\n导入特定的函数')
# 若使用这种语法，调用函数时就无需使用句点。
# 由于我们在import语句中显式地导入了函数 fun4()，因此调用它时只需指定其名称。
# 导入特定的函数,使用他的方法是为 方法名()
from common2 import fun4,fun5       
fun4()
fun5()
# fun6()    #报错，因为未引入这个方法

print('\n导入模块中的所有函数')
# 使用星号(*)运算符可让Python导入模块中的所有函数:
    # import语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。
    # 由于导入了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。
# 然而，使用并非自己编写的大型模块时，最好不要采用这种导入方法:
    # 如果模块中有函数的名称与你的项目中使用的名称相同，可能导致意想不到的结果:
    # Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数。 
# 最佳的做法是:
    # 要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法。
    # 这能让代码更清晰，更容易阅读和理解。
    # 这里之所以介绍这种导入方法，只是想让你在阅读别人编写的代码时，如果遇到类似于下面的import语句，能够理解它们:

from common3 import *
fun7()
fun8()
fun9()


print('\n使用as给函数指定别名')
# 如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长
# 可指定简短而独一无二的别名——函数的另一个名称，类似于外号。
# 要给函数指定这种特殊外号，需要在导入它时这样做。
from common4 import fun10 as f10, fun11 as f11, fun12 as f12
f10()
f11()
f12()


print('\n使用as给模块指定别名')
# 还可以给模块指定别名。通过给模块指定简短的别名(如给模块common4指定别名c4)
# 让你能够更轻松地调用模块中的函数。相比于common4.fun15()，c4.fun15()更为简洁:
# 这样不仅能使代码更简洁，还可以让你不再关注模块名，而专注于描述性的函数名。
# 这些函数名明确地指出了函数的功能，对理解代码而言，它们比模块名更重要。
import common5 as c5   
c5.fun13()
c5.fun14()
c5.fun15()

